import express from 'express';
import multer from 'multer';
import fs from 'fs';
import path from 'path';
import FileMetadata from './models/FileMetadata.js'; // Corrected import path
import { fileURLToPath } from 'url'; // To handle __dirname in ES modules

// Since __dirname is not available in ES modules, we create it
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// const router = express.Router(); // Will be initialized inside the setup function

// Ensure the uploads directory exists - this can be done once at server start too
// For robustness, keeping it here or ensuring server/index.js handles it comprehensively.
// server/index.js already creates 'uploads/shared_files', so this specific check might be redundant
// if routes are guaranteed to run after server/index.js initial setup.
// However, direct execution of this file (e.g. for testing) might benefit.
const uploadsDir = path.join(__dirname, 'uploads'); // Relative to this file's location
const sharedFilesDir = path.join(uploadsDir, 'shared_files');

if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir);
}
if (!fs.existsSync(sharedFilesDir)) {
  fs.mkdirSync(sharedFilesDir);
}

// Multer configuration
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, sharedFilesDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const extension = path.extname(file.originalname);
    cb(null, file.fieldname + '-' + uniqueSuffix + extension);
  }
});

const upload = multer({ 
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 } // Example: 10MB file size limit
});

// POST /api/files/upload - Upload a new file
router.post('/upload', upload.single('file'), async (req, res) => {
  if (!req.file) {
    return res.status(400).json({ message: 'No file uploaded.' });
  }

  try {
    const { originalname, filename, path: serverPath, mimetype, size } = req.file;
    
    const newFileMetadata = new FileMetadata({
      originalName: originalname,
      uniqueFilename: filename, // This is the name generated by multer
      serverPath: serverPath, // Path where multer saved the file
      mimeType: mimetype,
      size: size,
      isActive: false, // Default to not active
    });

    const savedMetadata = await newFileMetadata.save();
    
    // Emit event
    const io = req.app.get('socketio'); // Get io instance from app
    if (io) {
      io.emit('shared_files_updated');
      console.log('Emitted shared_files_updated after upload');
    } else {
      console.warn('Socket.IO instance not found on req.app. Could not emit shared_files_updated.');
    }
    
    res.status(201).json(savedMetadata);
  } catch (error) {
    console.error('Error saving file metadata:', error);
    // If metadata save fails, try to delete the orphaned file
    if (req.file && req.file.path) {
      fs.unlink(req.file.path, (unlinkErr) => {
        if (unlinkErr) console.error('Error deleting orphaned uploaded file:', unlinkErr);
      });
    }
    res.status(500).json({ message: 'Error saving file metadata', error: error.message });
  }
});

// GET /api/files - Get all files (Admin)
router.get('/', async (req, res) => {
  try {
    const files = await FileMetadata.find().sort({ uploadedAt: -1 });
    res.json(files);
  } catch (error) {
    console.error('Error fetching all files:', error);
    res.status(500).json({ message: 'Error fetching files', error: error.message });
  }
});

// GET /api/files/active_for_audience - Get active files for audience
router.get('/active_for_audience', async (req, res) => {
  try {
    const activeFiles = await FileMetadata.find({ isActive: true }).sort({ uploadedAt: -1 });
    res.json(activeFiles);
  } catch (error) {
    console.error('Error fetching active files:', error);
    res.status(500).json({ message: 'Error fetching active files', error: error.message });
  }
});

// PUT /api/files/:fileId/toggle - Toggle isActive status (Admin)
router.put('/:fileId/toggle', async (req, res) => {
  try {
    const fileId = req.params.fileId;
    const file = await FileMetadata.findById(fileId);

    if (!file) {
      return res.status(404).json({ message: 'File not found.' });
    }

    file.isActive = !file.isActive;
    await file.save();

    // Emit event
    const io = req.app.get('socketio');
    if (io) {
      io.emit('shared_files_updated');
      console.log('Emitted shared_files_updated after toggle');
    } else {
      console.warn('Socket.IO instance not found. Could not emit after toggle.');
    }

    res.json(file);
  } catch (error) {
    console.error('Error toggling file status:', error);
    if (error.name === 'CastError') {
        return res.status(400).json({ message: 'Invalid file ID format.' });
    }
    res.status(500).json({ message: 'Error toggling file status', error: error.message });
  }
});

// DELETE /api/files/:fileId - Delete a file (Admin)
router.delete('/:fileId', async (req, res) => {
  try {
    const fileId = req.params.fileId;
    const file = await FileMetadata.findById(fileId);

    if (!file) {
      return res.status(404).json({ message: 'File metadata not found.' });
    }

    // Delete the actual file from the server
    fs.unlink(file.serverPath, async (err) => {
      if (err) {
        // Log error but still attempt to remove metadata if file is already gone or path is wrong
        console.error('Error deleting physical file:', err);
        // If file not found on disk, it might be okay if db entry is still removed
        if (err.code !== 'ENOENT') {
            return res.status(500).json({ message: 'Error deleting physical file', error: err.message });
        }
      }
      
      // Delete metadata from MongoDB
      await FileMetadata.findByIdAndDelete(fileId);

      // Emit event
      const io = req.app.get('socketio');
      if (io) {
        io.emit('shared_files_updated');
        console.log('Emitted shared_files_updated after delete');
      } else {
        console.warn('Socket.IO instance not found. Could not emit after delete.');
      }
      
      res.json({ message: 'File and metadata deleted successfully.' });
    });
  } catch (error) {
    console.error('Error deleting file:', error);
    if (error.name === 'CastError') {
        return res.status(400).json({ message: 'Invalid file ID format.' });
    }
    res.status(500).json({ message: 'Error deleting file', error: error.message });
  }
});

// GET /api/files/download/:fileId - Download a file (Audience)
router.get('/download/:fileId', async (req, res) => {
  try {
    const fileId = req.params.fileId;
    const file = await FileMetadata.findById(fileId);

    if (!file) {
      return res.status(404).json({ message: 'File not found.' });
    }

    // For audience, only allow download if isActive is true.
    // Add admin role check here later if admins should bypass this.
    if (!file.isActive) {
      return res.status(403).json({ message: 'File is not active for download.' });
    }

    // Check if file exists at serverPath
    if (!fs.existsSync(file.serverPath)) {
        console.error('File not found on disk:', file.serverPath);
        return res.status(404).json({ message: 'File not found on server disk.' });
    }

    // Use originalName for the downloaded file name
    res.download(file.serverPath, file.originalName, (err) => {
      if (err) {
        console.error('Error during file download:', err);
        // res.headersSent is important because if headers are already sent,
        // we can't send another error JSON response.
        if (!res.headersSent) {
          res.status(500).json({ message: 'Error downloading file', error: err.message });
        }
      }
    });
  } catch (error) {
    console.error('Error processing download request:', error);
    if (error.name === 'CastError') {
        return res.status(400).json({ message: 'Invalid file ID format.' });
    }
    if (!res.headersSent) {
      res.status(500).json({ message: 'Error processing download request', error: error.message });
    }
  }
});

// Export a setup function that takes app and io
export default function setupFileRoutes(app, ioInstance) {
  // Store io instance in app.locals or make it available via req.app.get
  // This makes it accessible in route handlers if needed, or the router can use ioInstance directly.
  app.set('socketio', ioInstance); // Makes io available as req.app.get('socketio')

  const router = express.Router(); // Initialize router here

  // Ensure the uploads directory exists (can be redundant if server/index.js already does it)
  const projectRoot = path.resolve(__dirname, '..'); // Go up one level from server/ to project root
  const baseUploadsDir = path.join(projectRoot, 'server', 'uploads');
  const specificSharedFilesDir = path.join(baseUploadsDir, 'shared_files');

  if (!fs.existsSync(baseUploadsDir)) {
    fs.mkdirSync(baseUploadsDir, { recursive: true });
    console.log(`Created base uploads directory: ${baseUploadsDir}`);
  }
  if (!fs.existsSync(specificSharedFilesDir)) {
    fs.mkdirSync(specificSharedFilesDir, { recursive: true });
    console.log(`Created shared_files directory: ${specificSharedFilesDir}`);
  }
  
  // Multer configuration using specificSharedFilesDir
  const storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, specificSharedFilesDir);
    },
    filename: function (req, file, cb) {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
      const extension = path.extname(file.originalname);
      cb(null, file.fieldname + '-' + uniqueSuffix + extension);
    }
  });

  const upload = multer({ 
    storage: storage,
    limits: { fileSize: 10 * 1024 * 1024 } // Example: 10MB file size limit
  });

  // Attach routes to the router instance
  router.post('/upload', upload.single('file'), async (req, res) => {
    if (!req.file) {
      return res.status(400).json({ message: 'No file uploaded.' });
    }
    try {
      const { originalname, filename, path: serverPath, mimetype, size } = req.file;
      const newFileMetadata = new FileMetadata({
        originalName: originalname,
        uniqueFilename: filename,
        serverPath: serverPath,
        mimeType: mimetype,
        size: size,
        isActive: false,
      });
      const savedMetadata = await newFileMetadata.save();
      if (ioInstance) {
        ioInstance.emit('shared_files_updated');
        console.log('Emitted shared_files_updated after upload');
      }
      res.status(201).json(savedMetadata);
    } catch (error) {
      console.error('Error saving file metadata:', error);
      if (req.file && req.file.path) {
        fs.unlink(req.file.path, (unlinkErr) => {
          if (unlinkErr) console.error('Error deleting orphaned file:', unlinkErr);
        });
      }
      res.status(500).json({ message: 'Error saving file metadata', error: error.message });
    }
  });

  router.get('/', async (req, res) => {
    try {
      const files = await FileMetadata.find().sort({ uploadedAt: -1 });
      res.json(files);
    } catch (error) {
      console.error('Error fetching all files:', error);
      res.status(500).json({ message: 'Error fetching files', error: error.message });
    }
  });

  router.get('/active_for_audience', async (req, res) => {
    try {
      const activeFiles = await FileMetadata.find({ isActive: true }).sort({ uploadedAt: -1 });
      res.json(activeFiles);
    } catch (error) {
      console.error('Error fetching active files:', error);
      res.status(500).json({ message: 'Error fetching active files', error: error.message });
    }
  });

  router.put('/:fileId/toggle', async (req, res) => {
    try {
      const fileId = req.params.fileId;
      const file = await FileMetadata.findById(fileId);
      if (!file) return res.status(404).json({ message: 'File not found.' });
      file.isActive = !file.isActive;
      await file.save();
      if (ioInstance) {
        ioInstance.emit('shared_files_updated');
        console.log('Emitted shared_files_updated after toggle');
      }
      res.json(file);
    } catch (error) {
      console.error('Error toggling file status:', error);
      if (error.name === 'CastError') return res.status(400).json({ message: 'Invalid file ID format.' });
      res.status(500).json({ message: 'Error toggling file status', error: error.message });
    }
  });

  router.delete('/:fileId', async (req, res) => {
    try {
      const fileId = req.params.fileId;
      const file = await FileMetadata.findById(fileId);
      if (!file) return res.status(404).json({ message: 'File metadata not found.' });
      
      fs.unlink(file.serverPath, async (err) => {
        if (err && err.code !== 'ENOENT') {
          console.error('Error deleting physical file:', err);
          return res.status(500).json({ message: 'Error deleting physical file', error: err.message });
        }
        await FileMetadata.findByIdAndDelete(fileId);
        if (ioInstance) {
          ioInstance.emit('shared_files_updated');
          console.log('Emitted shared_files_updated after delete');
        }
        res.json({ message: 'File and metadata deleted successfully.' });
      });
    } catch (error) {
      console.error('Error deleting file:', error);
      if (error.name === 'CastError') return res.status(400).json({ message: 'Invalid file ID format.' });
      res.status(500).json({ message: 'Error deleting file', error: error.message });
    }
  });

  router.get('/download/:fileId', async (req, res) => {
    try {
      const fileId = req.params.fileId;
      const file = await FileMetadata.findById(fileId);
      if (!file) return res.status(404).json({ message: 'File not found.' });
      if (!file.isActive) return res.status(403).json({ message: 'File is not active for download.' });
      if (!fs.existsSync(file.serverPath)) {
          console.error('File not found on disk:', file.serverPath);
          return res.status(404).json({ message: 'File not found on server disk.' });
      }
      res.download(file.serverPath, file.originalName, (err) => {
        if (err && !res.headersSent) {
          console.error('Error during file download:', err);
          res.status(500).json({ message: 'Error downloading file', error: err.message });
        }
      });
    } catch (error) {
      console.error('Error processing download request:', error);
      if (error.name === 'CastError' && !res.headersSent) return res.status(400).json({ message: 'Invalid file ID format.' });
      if (!res.headersSent) res.status(500).json({ message: 'Error processing download request', error: error.message });
    }
  });
  
  // Mount the router at the base path (e.g., /api/files)
  app.use('/api/files', router);
}
